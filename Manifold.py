'''
Manifold.py
checked with pylint, to catch some errors
'''

__licence__ = 'GPL'
__title__ = 'Manifold.py'
__version__ = '0.9.6'

# disabling line-too-long pylint warning
# pylint: disable=C0301
# disabling too-many-lines pylint warning
# pylint: disable=C0302
CAVITIES = {
    # common cavities consists of 11 vectors [x dim., y dim.]
    'C08-2': ([0., 0.], [0., 29.5], [6.35, 29.5], [6.35, 21.], [6.9, 19.5], [10.3, 19.5], [10.3, 3.1], [11., 0.5], [13., 0.5], [13., 0.], [0., 0.]),
    'C10-2': ([0., 0.], [0., 35.], [7.94, 35.], [7.94, 26.], [8.48, 24.5], [11.95, 24.5], [11.95, 3.1], [12.65, 0.5], [15., 0.5], [15., 0.], [0., 0.]),
    'C12-2': ([0., 0.], [0., 48.5], [11.11, 48.5], [11.11, 37.], [11.47, 36.], [14.6, 36.], [14.6, 3.8], [15.48, 0.5], [17.5, 0.5], [17.5, 0.], [0., 0.]),
    'C16-2': ([0., 0.], [0., 49.5], [14.3, 49.5], [14.3, 36.5], [14.66, 35.5], [17.75, 35.5], [17.75, 3.8], [18.63, 0.5], [21., 0.5], [21., 0.], [0., 0.]),
    'C20-2': ([0., 0.], [0., 59.5], [18.26, 59.5], [18.26, 45.5], [18.62, 45.5], [21.75, 45.4], [21.75, 3.9], [22.66, 0.5], [24., 0.5], [24., 0.], [0., 0.]),
    # common cavities consists of 12 vectors [x dim., y dim.]
    'C08-3S': ([0., 0.], [0., 40.5], [7.14, 40.5], [7.14, 32.5], [7.94, 32.], [7.94, 16.5], [10.3, 16.], [10.3, 3.1], [11., 0.5], [13., 0.5], [13., 0.], [0., 0.]),
    'C10-3S': ([0., 0.], [0., 49.5], [8.74, 49.5], [8.74, 40.5], [9.53, 40.], [9.53, 18.5], [11.95, 18.], [11.95, 3.1], [12.65, 0.5], [15., 0.5], [15., 0.], [0., 0.]),
    'C12-3S': ([0., 0.], [0., 60.5], [11.11, 60.5], [11.11, 50.], [11.9, 49.5], [11.9, 27.], [14.6, 26.5], [14.6, 3.8], [15.48, 0.5], [17.5, 0.5], [17.5, 0.], [0., 0.]),
    'C16-3S': ([0., 0.], [0., 58.5], [12.71, 58.5], [12.71, 48.], [14.3, 46.], [14.3, 22.5], [17.75, 20.5], [17.75, 3.8], [18.63, 0.5], [21., 0.5], [21., 0.], [0., 0.]),
    'C20-3S': ([0., 0.], [0., 78.5], [16.68, 78.5], [16.68, 66.], [18.25, 65.5], [18.25, 26.], [21.75, 25.5], [21.75, 3.9], [22.66, 0.5], [24., 0.5], [24., 0.], [0., 0.]),
    'C08-3': ([0., 0.], [0., 43.5], [7.14, 43.5], [7.14, 34.], [7.94, 33.5], [7.94, 20.], [10.3, 19.5], [10.3, 3.1], [11., 0.5], [13., 0.5], [13., 0.], [0., 0.]),
    'C10-3': ([0., 0.], [0., 49.], [7.94, 49.], [7.94, 40.], [8.74, 39.5], [8.74, 24.], [11.95, 23.5], [11.95, 3.1], [12.65, 0.5], [15., 0.5], [15., 0.], [0., 0.]),
    'C12-3': ([0., 0.], [0., 73.5], [11.11, 73.5], [11.11, 62.], [11.9, 61.5], [11.9, 37.], [14.6, 36.5], [14.6, 3.8], [15.48, 0.5], [17.5, 0.5], [17.5, 0.], [0., 0.]),
    'C16-3': ([0., 0.], [0., 75.5], [13.5, 75.5], [13.5, 64.5], [14.3, 64.], [14.3, 36.], [17.75, 35.5], [17.75, 3.8], [18.63, 0.5], [21., 0.5], [21., 0.], [0., 0.]),
    'C20-3': ([0., 0.], [0., 100.5], [16.68, 100.5], [16.68, 88.], [18.25, 87.5], [18.25, 46.5], [21.75, 46.], [21.75, 3.9], [22.66, 0.5], [27., 0.5], [27., 0.], [0., 0.]),
    # common cavities consists of 13 vectors [x dim., y dim.]
    'C08-4': ([0., 0.], [0., 56.5], [6.35, 56.5], [6.35, 48.], [7.14, 47.5], [7.14, 34.], [7.94, 33.5], [7.94, 20.], [10.3, 19.5], [10.3, 3.1], [11., 0.5], [13., 0.5], [13., 0.], [0., 0.]),
    'C10-4': ([0., 0.], [0., 65.], [7.94, 65.], [7.94, 56.], [8.74, 55.5], [8.74, 40.], [9.53, 39.5], [9.53, 24.], [11.95, 23.5], [11.95, 3.1], [12.65, 0.5], [15., 0.5], [15., 0.], [0., 0.]),
    'C12-4': ([0., 0.], [0., 99.5], [10.31, 99.5], [10.31, 88.], [11.11, 87.5], [11.11, 62.], [11.9, 61.5], [11.9, 37.], [14.6, 36.5], [14.6, 3.8], [15.48, 0.5], [17.5, 0.5], [17.5, 0.], [0., 0.]),
    'C16-4': ([0., 0.], [0., 104.5], [12.71, 104.5], [12.71, 93.], [13.5, 92.5], [13.5, 64.5], [14.3, 64.], [14.3, 36.], [17.75, 35.5], [17.75, 3.8], [18.63, 0.5], [21., 0.5], [21., 0.], [0., 0.]),
    'C20-4': ([0., 0.], [0., 142.5], [15.88, 142.5], [15.88, 129.], [16.68, 128.5], [16.68, 87.5], [18.26, 87.], [18.26, 46.5], [21.75, 46.], [21.75, 3.9], [22.66, 0.5], [24., 0.5], [24., 0.], [0., 0.]),
    # Sun cavities consists of 9 vectors [x dim., y dim.]
    'T-8A': ([0., 0.], [0., 19.10], [5.56, 19.10], [5.56, 15.19], [7.27, 13.49], [7.27, 4.65], [8.34, 3.58], [8.34, 0.], [0., 0.]),
    'T-10A': ([0., 0.], [0., 35.12], [8.74, 35.12], [8.74, 27.94], [9.3, 27.38], [9.3, 4.99], [10.33, 3.96], [10.33, 0.], [0., 0.]),
    'T-13A': ([0., 0.], [0., 39.87], [8.74, 39.87], [8.74, 32.72], [9.3, 32.16], [9.3, 4.99], [10.33, 3.96], [10.33, 0.], [0., 0.]),
    'T-3A': ([0., 0.], [0., 47.88], [11.13, 47.88], [11.13, 40.05], [11.88, 39.29], [11.88, 5.19], [13.11, 3.96], [13.11, 0.], [0., 0.]),
    'T-5A': ([0., 0.], [0., 41.53], [11.13, 41.53], [11.13, 33.70], [11.88, 32.94], [11.88, 5.19], [13.11, 3.96], [13.11, 0.], [0., 0.]),
    'T-16A': ([0., 0.], [0., 62.18], [12.07, 62.16], [12.7, 53.27], [17.08, 52.38], [17.08, 5.98], [18.28, 4.78], [18.28, 0.], [0., 0.]),
    'T-18A': ([0., 0.], [0., 79.63], [15.88, 79.63], [15.88, 68.32], [23.05, 65.89], [23.05, 6.31], [23.8, 5.56], [23.8, 0.], [0., 0.]),
    # Sun cavities consists of 13 vectors [x dim., y dim.]
    'T-11A': ([0., 0.], [0., 62.81], [6.75, 58.76], [6.75, 52.60], [8.74, 52.60], [8.74, 45.42], [9.3, 44.86], [9.3, 22.47], [10.33, 21.44], [10.33, 17.48], [10.92, 17.48], [10.92, 0.], [0., 0.]),
    'T-2A': ([0., 0.], [0., 68.75], [8.74, 63.5], [8.74, 53.44], [11.13, 53.44], [11.13, 45.60], [11.88, 44.85], [11.88, 23.45], [13.11, 22.22], [13.11, 18.26], [13.7, 18.26], [13.7, 0.], [0., 0.]),
    'T-17A': ([0., 0.], [0., 87.37], [12.7, 79.74], [12.7, 69.28], [15.89, 69.28], [15.89, 60.72], [17.08, 59.53], [17.08, 28.98], [18.28, 27.78], [18.28, 23.], [19.85, 23.], [19.85, 0.], [0., 0.]),
    'T-19A': ([0., 0.], [0., 117.69], [15.88, 108.15], [15.88, 93.12], [20.65, 93.12], [20.65, 81.77], [23.05, 79.37], [23.05, 36.17], [24.3, 34.92], [24.3, 29.36], [26.25, 29.36], [26.25, 0.], [0., 0.]),
    # Sun cavities consists of 15 vectors [x dim., y dim.]
    'T-21A': ([0., 0.], [0., 75.51], [6.75, 71.46], [6.75, 65.30], [8.74, 65.30], [8.74, 58.12], [9.3, 57.56], [9.3, 35.17], [10.33, 34.14], [10.33, 30.18], [10.92, 30.18], [10.92, 13.52], [11.3, 13.14], [11.3, 0.], [0., 0.]),
    'T-22A': ([0., 0.], [0., 83.81], [8.74, 78.56], [8.74, 68.5], [11.13, 68.5], [11.13, 60.66], [11.88, 59.91], [11.88, 38.51], [13.11, 37.28], [13.11, 33.32], [10.92, 33.32], [10.92, 15.84], [11.3, 15.46], [11.3, 0.], [0., 0.]),
    'T-23A': ([0., 0.], [0., 105.64], [12.7, 98.01], [12.7, 87.55], [15.89, 87.55], [15.89, 78.99], [17.08, 77.80], [17.08, 47.25], [18.28, 46.05], [18.28, 41.27], [19.85, 41.27], [19.85, 18.64], [20.23, 18.26], [20.23, 0.], [0., 0.]),
    'T-24A': ([0., 0.], [0., 136.13], [15.88, 126.59], [15.88, 114.56], [20.65, 114.56], [20.65, 103.21], [23.05, 100.81], [23.05, 57.61], [24.3, 56.36], [24.3, 50.80], [26.2, 50.80], [26.2, 22.20], [26.58, 21.82], [26.58, 0.], [0., 0.]),
    # wandfluh cavities consists of  vectors [x dim., y dim.]
    'ISO 7789-18-01-0-98': ([0., 0.], [], [0., 0.]),
    'ISO 7789-22-01-0-98': ([0., 0.], [], [0., 0.]),
    'ISO 7789-33-01-0-98': ([0., 0.], [], [0., 0.]),
    'ISO 7789-42-01-0-98': ([0., 0.], [], [0., 0.]),
    # wandfluh cavities consists of 10 vectors [x dim., y dim.]
    'ISO 7789-18-02-0-98': ([0., 0.], [0., 54.91], [6.75, 46.8], [6.75, 36.23], [7.5, 35.8], [7.5, 21.6], [9., 20.3], [9., 2.7], [9.9, 0.3], [14.5, 0.3], [14.5, 0.], [0., 0.]),
    'ISO 7789-22-02-0-98': ([0., 0.], [], [0., 0.]),
    'ISO 7789-42-02-0-98': ([0., 0.], [], [0., 0.]),
    # wandfluh cavities consists of  vectors [x dim., y dim.]
    'ISO 7789-22-04-0-98': ([0., 0.], [], [0., 0.]),
    'ISO 7789-42-04-0-98': ([0., 0.], [], [0., 0.]),
    '2.13-1020' : ([0., 0.], [0., 51.05], [6.75, 47.], [6.75, 36.95], [7.5, 36.], [7.5, 21.8], [9., 20.5], [9., 2.9], [9.9, 0.5], [14.5, 0.5], [14.5, 0.], [0., 0.], [0., 0.]),
    # the following cavites are ports
    # ISO1179 ports [without O-ring seal] consists of 5 vectors [x dim., y dim.]
    'G1/8': ([0., 0.], [0., 12.], [4.95, 12.], [4.95, 0.5], [8.6, 0.5], [8.6, 0.], [0., 0.]),
    'G1/4': ([0., 0.], [0., 14.5], [6.65, 14.5], [6.65, 0.5], [10.35, 0.5], [10.35, 0.], [0., 0.]),
    'G3/8': ([0., 0.], [0., 16.], [8.4, 16.], [8.4, 0.5], [12.25, 0.5], [12.25, 0.], [0., 0.]),
    'G1/2': ([0., 0.], [0., 17.5], [10.55, 17.5], [10.55, 0.5], [17., 0.5], [17., 0.], [0., 0.]),
    'G3/4': ([0., 0.], [0., 22.5], [13.3, 22.5], [13.3, 0.5], [20., 0.5], [20., 0.], [0., 0.]),
    'G1': ([0., 0.], [0., 22.5], [16.75, 22.5], [16.75, 0.5], [23.05, 0.5], [23.05, 0.], [0., 0.]),
    'G1-1/4': ([0., 0.], [0., 23.], [21.1, 23.], [21.1, 0.5], [27., 0.5], [27., 0.], [0., 0.]),
    'G1-1/2': ([0., 0.], [0., 25.5], [24.05, 25.5], [24.05, 0.5], [30.25, 0.5], [30.25, 0.], [0., 0.]),
    'G2': ([0., 0.], [0., 28.], [29.95, 28.], [29.95, 0.5], [36.65, 0.5], [36.65, 0.], [0., 0.]),
    # ISO6149 ports [with O-ring seal] consists of 6 vectors [x dim., y dim.]
    'M8x1.0': ([0., 0.], [0., 12.], [3.58, 12.], [3.58, 2.1], [4.55, 0.5], [8.5, 0.5], [8.5, 0.], [0., 0.]),
    'M10x1.0': ([0., 0.], [0., 12.], [4.58, 12.], [4.58, 2.1], [5.55, 0.5], [10., 0.5], [10., 0.], [0., 0.]),
    'M12x1.5': ([0., 0.], [0., 14.5], [5.34, 14.5], [5.35, 2.9], [6.9, 0.5], [11., 0.5], [11., 0.], [0., 0.]),
    'M14x1.5': ([0., 0.], [0., 14.5], [6.34, 14.5], [6.34, 2.9], [7.9, 0.5], [7.9, 0.5], [12.5, 0.], [0., 0.]),
    'M16x1.5': ([0., 0.], [0., 16.], [7.34, 16.], [7.34, 2.9], [8.9, 0.5], [14., 0.5], [14., 0.], [0., 0.]),
    'M18x1.5': ([0., 0.], [0., 17.], [8.34, 17.], [8.34, 2.9], [9.9, 0.5], [14.5, 0.5], [14.5, 0.], [0., 0.]),
    'M20x1.5': ([0., 0.], [0., 18.5], [9.34, 18.5], [9.34, 2.9], [10.9, 0.5], [16., 0.5], [16., 0.], [0., 0.]),
    'M22x1.5': ([0., 0.], [0., 18.5], [10.3, 18.5], [10.3, 2.9], [11.9, 0.5], [17., 0.5], [17., 0.], [0., 0.]),
    'M24x1.5': ([0., 0.], [0., 20.5], [11.3, 20.5], [11.3, 2.9], [12.9, 0.5], [12.9, 0.5], [16., 0.], [0., 0.]),
    'M26x1.5': ([0., 0.], [0., 22.5], [12.3, 22.5], [12.3, 3.6], [13.9, 0.5], [13.9, 0.5], [16.5, 0.], [0., 0.]),
    'M27x2.0': ([0., 0.], [0., 22.5], [12.6, 22.5], [12.6, 3.6], [14.7, 0.5], [20., 0.5], [20., 0.], [0., 0.]),
    'M30x2.0': ([0., 0.], [0., 22.5], [14.1, 22.5], [14.1, 3.6], [16.2, 0.5], [21.5, 0.5], [21.5, 0.], [0., 0.]),
    'M33x2.0': ([0., 0.], [0., 22.5], [15.6, 22.5], [15.6, 3.6], [17.7, 0.5], [24.5, 0.5], [24.5, 0.], [0., 0.]),
    'M38x1.5': ([0., 0.], [0., 23.], [17.9, 23.], [17.9, 3.6], [20.4, 0.5], [24., 0.5], [24., 0.], [0., 0.]),
    'M42x2.0': ([0., 0.], [0., 23.], [19.8, 23.], [19.8, 3.6], [22.5, 0.5], [26.5, 0.5], [26.5, 0.], [0., 0.]),
    'M45x1.5': ([0., 0.], [0., 23.], [21.3, 23.], [21.3, 3.6], [24.2, 0.5], [28.5, 0.5], [28.5, 0.], [0., 0.]),
    'M48x2.0': ([0., 0.], [0., 23.], [23.1, 23.], [23.1, 3.6], [25.2, 0.5], [33., 0.5], [33., 0.], [0., 0.]),
    'M60x2.0': ([0., 0.], [0., 25.], [29.1, 25.], [29.1, 3.6], [31.2, 0.5], [38., 0.5], [38., 0.], [0., 0.]),
    # ISO11926 ports [with O-ring seal] consists of 8 vectors [x dim., y dim.]
    'U5/16-24': ([0., 0.], [0., 12.39], [3.97, 12.39], [3.97, 2.38], [4.37, 0.5], [8.53, 0.5], [8.53, 0.], [0., 0.]),
    'U3/8-24': ([0., 0.], [0., 12.39], [4.76, 12.39], [4.76, 2.38], [5.16, 0.5], [9.53, 0.5], [9.53, 0.], [0., 0.]),
    'U7/16-20': ([0., 0.], [0., 14.5], [5.56, 14.5], [5.56, 2.90], [6.07, 0.5], [10.5, 0.5], [10.5, 0.], [0., 0.]),
    'U1/2-20': ([0., 0.], [0., 14.5], [6.35, 14.5], [6.35, 3.], [6.88, 0.5], [11.5, 0.5], [11.5, 0.], [0., 0.]),
    'U9/16-18': ([0., 0.], [0., 16.], [7.14, 16.], [7.14, 3.], [7.68, 0.5], [12.5, 0.5], [12.5, 0.], [0., 0.]),
    'U3/4-16': ([0., 0.], [0., 18.], [9.53, 18.], [9.53, 3.], [10.19, 0.5], [15., 0.5], [15., 0.], [0., 0.]),
    'U7/8-14': ([0., 0.], [0., 20.5], [11.11, 20.5], [11.11, 3.], [11.78, 0.5], [17., 0.5], [17., 0.], [0., 0.]),
    'U1-1/16-12': ([0., 0.], [0., 23.5], [13.49, 23.5], [13.49, 3.], [14.16, 0.5], [20.5, 0.5], [20.5, 0.], [0., 0.]),
    'U1-3/16-12': ([0., 0.], [0., 23.5], [15., 23.5], [15., 3.80], [15.97, 0.5], [22.42, 0.5], [22.42, 0.], [0., 0.]),
    'U1-5/16-12': ([0., 0.], [0., 23.5], [16.67, 23.5], [16.67, 3.], [17.34, 0.5], [24.5, 0.5], [24.5, 0.], [0., 0.]),
    'U1-5/8-12': ([0., 0.], [0., 23.5], [20.64, 23.5], [20.64, 3.], [21.31, 0.5], [29., 0.5], [29., 0.], [0., 0.]),
    'U1-7/8-12': ([0., 0.], [0., 23.5], [23.81, 23.5], [23.81, 3.], [24.48, 0.5], [32.5, 0.5], [32.5, 0.], [0., 0.]),
    'U2-12': ([0., 0.], [0., 23.5], [31.75, 23.5], [31.75, 3.85], [32.65, 0.5], [44.2, 0.5], [44.2, 0.], [0., 0.]),
    # the following cavites are plugs
    # Zero-Leak Gold socket head metric, consists of 8 vectors [x dim., y dim.]
    'M5x0.8 Plug': ([0., 0.], [0., 10.], [2.5, 10.], [2.5, 3.], [2.84, 1.], [3.5, 1.], [3.5, 0.], [0., 0.]),
    'M8x1.0 Plug': ([0., 0.], [0., 10.], [4., 10.], [4., 3.31], [4.55, 1.], [5., 1.], [5., 0.], [0., 0.]),
    'M10x1.0 Plug': ([0., 0.], [0., 10.], [5., 10.], [5., 3.31], [5.55, 1.], [6., 1.], [6., 0.], [0., 0.]),
    'M12x1.5 Plug': ([0., 0.], [0., 12.5], [6., 12.5], [6., 4.29], [6.9, 1.], [7.5, 1.], [7.5, 0.], [0., 0.]),
    'M14x1.5 Plug': ([0., 0.], [0., 12.5], [7., 12.5], [7., 4.29], [7.9, 1.], [8.5, 1.], [8.5, 0.], [0., 0.]),
    'M16x1.5 Plug': ([0., 0.], [0., 15.], [8., 15.], [8., 4.29], [8.9, 1.], [9.5, 1.], [9.5, 0.], [0., 0.]),
    'M18x1.5 Plug': ([0., 0.], [0., 16.], [9., 16.], [9., 4.29], [9.9, 1.], [10.5, 1.], [10.5, 0.], [0., 0.]),
    'M22x1.5 Plug': ([0., 0.], [0., 18.], [11., 18.], [11., 4.29], [11.9, 1.], [12.5, 0.5], [12.5, 0.], [0., 0.]),
    'M27x1.5 Plug': ([0., 0.], [0., 21.], [13.5, 21.], [13.5, 5.14], [14.7, 1.], [15.5, 1.], [15.5, 0.], [0., 0.]),
    'M27x2.0 Plug': ([0., 0.], [0., 21.], [13.5, 21.], [13.5, 5.14], [14.7, 1.], [15.5, 1.], [15.5, 0.], [0., 0.]),
    'M33x1.5 Plug': ([0., 0.], [0., 21.], [16.5, 21.], [16.5, 5.14], [17.7, 1.], [18.5, 1.], [18.5, 0.], [0., 0.]),
    'M33x2.0 Plug': ([0., 0.], [0., 21.], [16.5, 21.], [16.5, 5.14], [17.7, 1.], [18.5, 1.], [18.5, 0.], [0., 0.]),
    'M42x1.5 Plug': ([0., 0.], [0., 22.], [21., 22.], [21., 5.14], [22.2, 1.], [23., 1.], [23., 0.], [0., 0.]),
    'M42x2.0 Plug': ([0., 0.], [0., 22.], [21., 22.], [21., 5.14], [22.2, 1.], [23., 1.], [23., 0.], [0., 0.]),
    'M48x2.0 Plug': ([0., 0.], [0., 23.], [24., 23.], [24., 5.14], [25.2, 1.], [26., 1.], [26., 0.], [0., 0.]),
    'M60x2.0 Plug': ([0., 0.], [0., 26.], [30., 26.], [30., 5.14], [31.2, 1.], [31.5, 1.], [31.5, 0.], [0., 0.]),
    # plugs [with copper washer] consists of 7 vectors [x dim., y dim.]
    'M4x0.7 Cu Plug': ([0., 0.], [0., 8.], [2., 8.], [2., 0.5], [4.1, 0.5], [4.1, 0.], [0., 0.]),
    'M5x0.8 Cu Plug': ([0., 0.], [0., 10.], [2.5, 10.], [2.5, 0.5], [5.1, 0.5], [5.1, 0.], [0., 0.]),
    'M6x1.0 Cu Plug': ([0., 0.], [0., 10.], [3., 10.], [3., 0.5], [6.1, 0.5], [6.1, 0.], [0., 0.]),
    'M8x1.25 Cu Plug': ([0., 0.], [0., 12.], [4., 12.], [4., 0.5], [7.6, 0.5], [7.6, 0.], [0., 0.]),
    'M10x1.5 Cu Plug': ([0., 0.], [0., 18.], [5., 18.], [5., 0.5], [9.1, 0.5], [6.1, 0.], [0., 0.]),
    }

DINVALVES = {
    # DIN24342 poppet valve consists of 9 vectors [x dim., y dim.]
    'DIN24342 NG16': ([0., 0.], [0., 56.], [12.5, 56.], [12.5, 45.], [13.04, 43.], [16., 43.], [16., 2.], [16.54, 0.], [0., 0.]),
    'DIN24342 NG25': ([0., 0.], [0., 72.], [17., 72.], [17., 60.5], [17.67, 58.], [22.5, 58.], [22.5, 2.5], [23.17, 0.], [0., 0.]),
    'DIN24342 NG32': ([0., 0.], [0., 85.], [22.5, 85.], [22.5, 70.], [23.17, 70.], [30., 70.], [30., 2.5], [30.67, 0.], [0., 0.]),
    'DIN24342 NG40': ([0., 0.], [0., 105.], [27.5, 105.], [27.5, 90.], [28.3, 87.], [37.5, 87.], [37.5, 3.], [38.3, 0.], [0., 0.]),
    'DIN24342 NG50': ([0., 0.], [0., 122.], [34., 122.], [34., 103.], [34.8, 100.], [45., 100.], [45., 4.], [46.07, 0.], [0., 0.]),
    'DIN24342 NG63': ([0., 0.], [0., 155.], [45., 155.], [45., 134.], [46.07, 130.], [60., 130.], [60., 4.], [61.07, 0.], [0., 0.]),
    }

# data for the bolt pattern and locating pin
DINPATTERNS = {
    # DIN24342 port dia., 1/2 bolt coor., dia, dep, (pin coor., dia, dep)
    'DIN24342 NG16': ([23., 8., 16., 10.5, 4., 10.]),
    'DIN24342 NG25': ([29., 12., 24., 16., 6., 10.]),
    'DIN24342 NG32': ([35., 16., 32., 17., 6., 10.]),
    'DIN24342 NG40': ([42.5, 20., 40., 23., 6., 10.]),
    'DIN24342 NG50': ([50., 20., 40., 30., 8., 10.]),
    'DIN24342 NG63': ([62.5, 30., 60., 38., 8., 10.]),
    }

# data for pilots
DINPORTS = {
    # DIN24342 (x, y, z1, z2 coor., dia)
    'DIN24342 NG16 X':  ([-25., 0., 4.]),
    'DIN24342 NG16 Y':  ([25., 0., 4.]),
    'DIN24342 NG16 Z1': ([0., 25., 4.]),
    'DIN24342 NG16 Z2': ([0., -25., 4.]),
    'DIN24342 NG25 X':  ([-33., 0., 6.]),
    'DIN24342 NG25 Y':  ([33., 0., 6.]),
    'DIN24342 NG25 Z1': ([0., 33., 6.]),
    'DIN24342 NG25 Z2': ([0., -33., 6.]),
    'DIN24342 NG32 X':  ([-41., 0., 8.]),
    'DIN24342 NG32 Y':  ([41., 0., 8.]),
    'DIN24342 NG32 Z1': ([0., 41., 8.]),
    'DIN24342 NG32 Z2': ([0., -41., 8.]),
    'DIN24342 NG40 X':  ([-50., 0., 10.]),
    'DIN24342 NG40 Y':  ([50., 0., 10.]),
    'DIN24342 NG40 Z1': ([0., 50., 10.]),
    'DIN24342 NG40 Z2': ([0., -50., 10.]),
    'DIN24342 NG50 X':  ([-58., 0., 10.]),
    'DIN24342 NG50 Y':  ([58., 0., 10.]),
    'DIN24342 NG50 Z1': ([0., 58., 10.]),
    'DIN24342 NG50 Z2': ([0., -58., 10.]),
    'DIN24342 NG63 X':  ([-75., 0., 12.]),
    'DIN24342 NG63 Y':  ([75., 0., 12.]),
    'DIN24342 NG63 Z1': ([0., 75., 12.]),
    'DIN24342 NG63 Z2': ([0., -75., 12.]),
    }

# these are the most common drillbit sizes, drillbits under 3.0 or 3.3 probably mot necessary
DRILLBITS = [
    0.0483, 0.05, 0.0584, 0.0686, 0.0787, 0.0889, 0.0991, 0.1, 0.1092, 0.1194, 0.1295, 0.1397, 0.1499, 0.16, 0.1702, 0.1803, 0.1905,
    0.2007, 0.2, 0.2108, 0.221, 0.2311, 0.2413, 0.25, 0.254, 0.2667, 0.2794, 0.2921, 0.3, 0.3048, 0.3175, 0.3302, 0.3429, 0.35, 0.368,
    0.3969, 0.4, 0.4064, 0.42, 0.44, 0.45, 0.4572, 0.46, 0.48, 0.5, 0.508, 0.5334, 0.55, 0.5715, 0.6, 0.6096, 0.635, 0.65, 0.6604, 0.7,
    0.7112, 0.7417, 0.75, 0.7874, 0.7938, 0.8, 0.8128, 0.8382, 0.85, 0.889, 0.9, 0.9144, 0.9398, 0.95, 0.9652, 0.9906, 1., 1.016, 1.0414,
    1.05, 1.0668, 1.0922, 1.1, 1.15, 1.1811, 1.1906, 1.2, 1.25, 1.3, 1.3208, 1.35, 1.397, 1.4, 1.45, 1.5, 1.5113, 1.55, 1.5875, 1.6,
    1.6129, 1.65, 1.7, 1.7018, 1.75, 1.778, 1.8, 1.85, 1.8542, 1.9, 1.9304, 1.95, 1.96, 1.97, 1.9844, 1.9939, 2., 2.01, 2.02, 2.03, 2.04,
    2.05, 2.0574, 2.07, 2.0828, 2.09, 2.1, 2.11, 2.12, 2.13, 2.14, 2.15, 2.16, 2.17, 2.1844, 2.19, 2.2, 2.21, 2.22, 2.23, 2.24, 2.25,
    2.26, 2.2606, 2.27, 2.28, 2.29, 2.3, 2.31, 2.32, 2.33, 2.34, 2.35, 2.3749, 2.3813, 2.4, 2.4384, 2.45, 2.4892, 2.5, 2.5273, 2.5781,
    2.6, 2.6416, 2.7, 2.7051, 2.75, 2.7781, 2.794, 2.8, 2.8194, 2.8702, 2.9, 2.9464, 3., 3.048, 3.1, 3.175, 3.2, 3.25, 3.2639, 3.3, 3.4,
    3.4544, 3.5, 3.5687, 3.5719, 3.6, 3.6576, 3.7, 3.7338, 3.75, 3.7973, 3.8, 3.8608, 3.9, 3.9116, 3.9688, 3.9878, 4., 4.0386, 4.0894,
    4.1, 4.2, 4.2164, 4.25, 4.3053, 4.3656, 4.3942, 4.4, 4.4958, 4.5, 4.572, 4.6, 4.6228, 4.699, 4.7, 4.75, 4.7625, 4.8, 4.8006, 4.8514,
    4.9, 4.9149, 4.9784, 5., 5.0546, 5.1, 5.1054, 5.1594, 5.1816, 5.2, 5.2197, 5.25, 5.3, 5.3086, 5.4, 5.4102, 5.5, 5.5563, 5.6, 5.6134,
    5.7, 5.75, 5.7912, 5.8, 5.9, 5.9436, 5.9531, 6., 6.0452, 6.1, 6.1468, 6.2, 6.2484, 6.25, 6.3, 6.35, 6.4, 6.5, 6.5278, 6.6, 6.6294, 6.7,
    6.7469, 6.75, 6.7564, 6.8, 6.9, 6.9088, 7., 7.0358, 7.1, 7.1374, 7.1438, 7.2, 7.25, 7.3, 7.366, 7.4, 7.493, 7.5, 7.5406, 7.6, 7.6708,
    7.7, 7.75, 7.8, 7.9, 7.9375, 8., 8.0264, 8.1, 8.2, 8.2042, 8.25, 8.3, 8.3344, 8.4, 8.4328, 8.5, 8.6, 8.6106, 8.7, 8.7313, 8.75, 8.8,
    8.8392, 8.9, 9., 9.0932, 9.1, 9.1281, 9.2, 9.25, 9.3, 9.3472, 9.4, 9.5, 9.525, 9.5758, 9.6, 9.7, 9.75, 9.8, 9.8044, 9.9, 9.9219, 10.,
    10.0838, 10.2616, 10.3188, 10.4902, 10.5, 10.7, 10.7156, 10.9, 11., 11.1125, 11.5, 11.5094, 11.9063, 12., 12.2, 12.3031, 12.5, 12.7,
    12.8, 13., 13.0969, 13.4938, 13.5, 13.8906, 14., 14.2, 14.2875, 14.5, 14.6844, 14.7, 15., 15.0813, 15.4781, 15.5, 15.875, 16., 16.2719,
    16.5, 16.6688, 16.8, 17., 17.0656, 17.4625, 17.5, 17.8594, 18., 18.2563, 18.5, 18.6531, 19., 19.05, 19.4469, 19.5, 19.8438, 20., 20.2406,
    20.5, 20.6375, 21., 21.0344, 21.4313, 21.5, 21.8281, 22., 22.225, 22.5, 22.6219, 23., 23.0188, 23.4156, 23.5, 23.8125, 24., 24.2094,
    24.5, 24.6063, 25., 25.0031, 25.4, 25.5, 25.7969, 26., 26.1938, 26.5, 26.5906, 26.9875, 27., 27.5, 28., 28.1781, 28.5, 28.575, 29.,
    29.3688, 29.5, 29.7656, 30., 30.1625, 30.5, 30.5594, 30.9563, 31., 31.3531, 31.5, 32., 32.5, 32.5438, 32.9406, 33., 33.3375, 33.5,
    33.7344, 34., 34.1313, 34.5, 34.5281, 35., 35.5, 35.7188, 36., 36.1156, 36.5, 44., 50., 62.
    ]

# flanges
FLANGES = {
    # ISO6162 flanges consists of 1/2 x, 1/2 y dimensions of flange pattern, bolt dia, bolt dep
    'ISO6162-1 1/2': ([8.75, 19.05, 8., 16.]),
    'ISO6162-1 3/4': ([11.15, 23.8, 10., 20.]),
    'ISO6162-1 1': ([13.1, 26.2, 10., 20.]),
    'ISO6162-1 1-1/4': ([15.1, 29.35, 10., 20.]),
    'ISO6162-1 1-1/2': ([17.85, 34.95, 12., 24.]),
    'ISO6162-1 2': ([21.45, 38.9, 12., 24.]),
    'ISO6162-1 2-1/2': ([25.4, 44.45, 12., 24.]),
    'ISO6162-1 3': ([30.95, 53.2, 16., 32.]),
    'ISO6162-1 3-1/2': ([34.95, 60.35, 16., 32.]),
    'ISO6162-1 4': ([38.9, 65.1, 16., 32.]),
    'ISO6162-1 5': ([46.05, 76.2, 16., 32.]),
    'ISO6162-2 1/2': ([9.1, 20.25, 8., 16.]),
    'ISO6162-2 3/4': ([11.9, 25.4, 10., 20.]),
    'ISO6162-2 1': ([13.9, 28.6, 12., 24.]),
    'ISO6162-2 1-1/4': ([15.9, 33.35, 14., 28.]),
    'ISO6162-2 1-1/2': ([18.25, 39.7, 16., 32.]),
    'ISO6162-2 2': ([22.25, 48.4, 20., 40.]),
    # ISO6164 flanges consists of 1/2 x, 1/2 y dimensions of flange pattern, bolt dia, bolt dep
    'ISO6164 3/8': ([12.35, 12.35, 6., 12.]),
    'ISO6164 1/2': ([14.85, 14.85, 8., 16.]),
    'ISO6164 3/4': ([17.65, 17.65, 8., 16.]),
    'ISO6164 1': ([21.9, 21.9, 10., 20.]),
    'ISO6164 1-1/4': ([25.8, 25.8, 12., 24.]),
    'ISO6164 1-1/2': ([30., 30., 14., 28.]),
    'ISO6164 2': ([34.7, 34.7, 16., 32.]),
    'ISO6164 2-1/2': ([41.7, 41.7, 20., 40.]),
    'ISO6164 3': ([51.25, 51.25, 20., 40.]),
    }

NGVALVES = {
    # NG, bolt pattern and pin, first bolt at x, y points
    'NG6': ([0., 0., 5., 10.], [40.5, 0.75, 5., 10.], [40.5, -31.75, 5., 10.], [0., -31., 5., 10.], [33., -31.75, 4., 8.]),
    'NG10': ([0., 0., 6., 12.], [54., 0., 6., 12.], [54., -46., 6., 12.], [0., -46., 6., 12.]),
    'NG16': ([0., 0., 10., 20.], [101.6, 0., 10., 20.], [101.6, -69.9, 10., 20.], [0., -69.9, 10., 20.], [34.1, 1.6, 6., 12.], [50., -71.5, 6., 12.], [76.6, 00., 4., 8.], [18.3, -69.9, 4., 8.]),
    'NG25': ([0., 0., 12., 24.], [130.2, 0., 12., 24.], [130.2, -92.1, 12., 24.], [0., -92.1, 12., 24.], [53.2, 0., 12., 24.], [77., -92.1, 12., 24.], [94.5, 4.8, 7.5, 15.], [29.4, -92.1, 7.5, 15.]),
    'NG32': ([0., 0., 20., 40.], [190.5, 0., 20., 40.], [190.5, -158.8, 20., 40.], [0., -158.8, 20., 40.], [76.2, 0., 20., 40.], [114.3, -158.8, 20., 40.], [138.9, 0., 7.5, 15.], [41.3, -158.8, 7.5, 15.]),
    }

NGPORTS = {
    # NG, P, A, T, T1, B, X, Y, L coor., dia
    'NG6 P': ([21.5, -25.9, 7.5]),
    'NG6 A': ([12.7, -15.5, 7.5]),
    'NG6 T': ([21.5, -5.1, 7.5]),
    'NG6 B': ([30.2, -15.5, 7.5]),
    'NG6 L': ([46.5, -25.1, 4.]),
    'NG10 P': ([27., -6.3, 11.]),
    'NG10 A': ([16.7, -21.4, 11.]),
    'NG10 T': ([3.2, -32.5, 11.]),
    'NG10 T1': ([50.8, -32.5, 11.]),
    'NG10 B': ([37.3, -21.4, 11.]),
    'NG10 L': ([-11., -0.5, 4.5]),
    'NG16 P': ([50., -14.3, 17.5]),
    'NG16 A': ([34.1, -55.6, 17.5]),
    'NG16 T': ([18.3, -14.3, 17.5]),
    'NG16 B': ([65.9, -55.6, 17.5]),
    'NG16 X': ([76.6, -15.9, 6.3]),
    'NG16 Y': ([88.1, -57.2, 6.3]),
    'NG16 L': ([0., -34.9, 6.3]),
    'NG25 P': ([77., -17.5, 25.]),
    'NG25 A': ([53.2, -74.6, 25.]),
    'NG25 T': ([29.4, -17.5, 25.]),
    'NG25 B': ([100.8, -74.6, 25.]),
    'NG25 X': ([17.5, -73., 11.]),
    'NG25 Y': ([112.7, -19., 11.]),
    'NG25 L': ([5.6, -46., 11.]),
    'NG32 P': ([114.3, -35., 32.]),
    'NG32 A': ([82.5, -123.8, 32.]),
    'NG32 T': ([41.3, -35., 32.]),
    'NG32 B': ([147.6, -123.8, 32.]),
    'NG32 X': ([41.3, -130.2, 11.]),
    'NG32 Y': ([168.3, -44.5, 11.]),
    'NG32 L': ([0., -79.4, 11.]),
    }

# metric o-rings
# first: static gland dimensions, P and L
# next: available sizes from 1.0 to 3.5
ORINGS = {
    '1.00' : ([0.7, 1.4],
              [1., 1.5, 2., 2.5, 3., 3.5, 4., 4.5, 5., 5.5, 6., 6.5, 7., 7.5, 8., 8.5, 9., 9.5, 10., 10.5, 11., 11.5, 12., 12.5,
               13., 13.5, 14., 14.5, 15., 15.5, 16., 16.5, 17., 17.5, 18., 18.5, 19., 19.5, 20., 20.5, 21., 21.5, 22., 22.5, 23.,
               23.5, 24., 24.5, 25., 26., 27., 28., 29., 30., 31., 32., 33., 34., 35., 36., 37., 38., 39., 40.]),
    '1.50' : ([1.14, 2.4],
              [1.5, 1.85, 2., 2.5, 3., 3.5, 4., 4.5, 5., 5.5, 6., 6.5, 7., 7.5, 8., 8.5, 9., 9.5, 10., 10.5, 10.7, 11., 11.5, 12.,
               12.5, 13., 13.5, 14., 14.5, 15., 15.5, 16., 17., 17.5, 18., 19., 19.5, 20., 21., 21.5, 22., 23., 24., 25., 26.,
               27., 28., 28.5, 29., 30., 31.5, 32., 33., 34., 35., 36., 37., 38., 39., 40., 41., 42., 43., 44., 45., 46., 47.,
               48., 49., 50., 51., 52., 53., 54., 55., 56., 57., 58., 59., 60., 61., 62., 63., 64., 65., 66., 67., 68., 69., 70.,
               71., 72., 73., 74., 75., 76., 77., 78., 79., 80., 81., 82., 83., 84., 85., 86., 87., 88., 89., 90., 91., 92., 93.,
               94., 95., 96., 97., 98., 99., 100.]),
    '2.00' : ([1.68, 2.8],
              [2., 3., 3.5, 4., 4.5, 5., 6., 6.5, 7., 8., 9., 9.5, 10., 11., 11.5, 12., 12.5, 13., 14., 15., 16., 17., 18., 19.,
               19.5, 20., 21., 22., 23., 23.5, 24., 24.5, 25., 26., 27., 28., 29., 29.5, 30., 31., 32., 33., 33.5, 34., 35., 36.,
               36.5, 37., 37.5, 38., 38.5, 39., 40., 41., 42., 43., 44., 45., 46., 47., 48., 49., 50., 51., 52., 53., 54., 55.,
               55.5, 56., 57., 58., 59., 60., 61., 62., 63., 64., 64.5, 65., 66., 67., 68., 69., 69.5, 70., 71., 72., 73., 74.,
               75., 76., 77., 78., 79., 80., 81., 82., 83., 84., 85., 86., 87., 88., 89., 90., 91., 92., 93., 94., 95., 96., 97.,
               98., 99., 100., 102., 105., 109.]),
    '2.50' : ([2.28, 3.5],
              [3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26.,
               27., 28., 29., 30., 31., 32., 33., 34., 35., 36., 37., 38., 39., 40., 41., 42., 43., 44., 45., 46., 47., 48., 49.,
               50., 51., 52., 53., 54., 55., 56., 57., 58., 59., 60., 61., 62., 63., 64., 65., 66., 67., 68., 69., 70., 71., 72.,
               73., 74., 75., 76., 77., 78., 79., 80., 81., 82., 83., 84., 85., 86., 87., 88., 89., 90., 91., 92., 93., 94., 95.,
               96., 97., 98., 99., 100., 101., 102., 103., 104., 105., 106., 107., 108., 109., 110., 111., 112., 113., 114., 115.,
               116., 117., 118., 119., 120., 121., 122., 123., 124., 125., 126., 127., 128., 129., 130., 131., 132., 133., 134.,
               135., 136., 137., 138., 139., 140., 141., 142., 143., 144., 145., 146., 147., 148., 149., 150., 162.]),
    '3.00' : ([2.45, 3.8],
              [3., 4., 5., 6., 7., 8., 9., 9.5, 10., 11., 12., 13., 13.5, 14., 15., 15.5, 16., 17., 17.5, 18., 19., 20., 21., 22.,
               23., 24., 25., 26., 27., 28., 28.5, 29., 29.5, 30., 31., 32., 33., 34., 35., 36., 36.5, 37., 37.5, 38., 39., 40.,
               41., 42., 42.5, 43., 44., 45., 46., 47., 48., 49., 50., 51., 52., 53., 54., 55., 56., 57., 58., 59., 60., 61., 62.,
               63., 64., 65., 66., 67., 68., 69., 70., 71., 72., 73., 74., 75., 76., 77., 78., 79., 80., 81., 82., 83., 84., 85.,
               86., 87., 88., 89., 90., 91., 92., 93., 94., 94.5, 95., 96., 97., 98., 98.5, 99., 100., 101., 102., 103., 104., 105.,
               106., 107., 108., 109., 110., 111., 112., 113., 114., 115., 116., 117., 118., 119., 120., 121., 122., 123., 124., 125.,
               126., 127., 128., 129., 130., 131., 132., 133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144., 145.,
               146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 161., 162., 163., 164., 165.,
               166., 167., 168., 169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180., 181., 182., 183., 184., 185.,
               186., 187., 188., 189., 190., 191., 192., 193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204., 205.,
               206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216., 217., 218., 219., 220., 221., 222., 223., 224., 225.,
               226., 227., 228., 229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240., 241., 242., 243., 244., 245.,
               246., 247., 248., 249., 250., 260., 270., 280., 285., 290., 310.]),
    '3.50' : ([2.65, 4.6],
              [8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27., 28., 29., 30., 31.,
               32., 33., 34., 35., 36., 37., 38., 39., 40., 41., 42., 43., 44., 45., 46., 47., 48., 49., 50., 51., 52., 53., 54., 55.,
               56., 57., 58., 59., 60., 61., 62., 63., 64., 65., 66., 67., 68., 69., 70., 71., 72., 73., 74., 75., 76., 77., 78., 79.,
               80., 81., 82., 83., 84., 85., 86., 87., 88., 89., 90., 91., 92., 93., 94., 95., 96., 97., 98., 99., 100., 101., 102., 103.,
               104., 105., 106., 107., 108., 109., 110., 111., 112., 113., 114., 115., 116., 117., 118., 119., 120., 121., 122., 123.,
               124., 125., 126., 127., 128., 129., 130., 131., 132., 133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143.,
               144., 145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 161., 162., 163.,
               164., 165., 166., 167., 168., 169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180., 181., 182., 183.,
               184., 185., 186., 187., 188., 189., 190., 191., 192., 193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203.,
               204., 205., 206., 207., 208., 209., 210., 215., 220., 225., 230., 235., 240., 245., 250., 255., 260., 265., 270., 275.,
               280., 285., 290., 295., 300., 305., 310., 315., 320., 325., 330., 335., 340., 345., 350., 351., 355., 360., 365., 370.,
               380., 390., 400., 410., 420., 430., 440.]),
    }

# SHCS
SHCS = {
    'M3': ([6.5, 3.], [3.7, 3.4]),
    'M4': ([8.25, 4.], [4.8, 4.4]),
    'M5': ([9.75, 5.], [5.8, 5.4]),
    'M6': ([11.2, 6.], [6.8, 6.4]),
    'M8': ([14.5, 8.], [8.8, 8.4]),
    'M10': ([17.5, 10.], [10.8, 10.5]),
    'M12': ([19.5, 12.], [13., 12.5]),
    'M14': ([22.5, 14.], [15., 14.5]),
    'M16': ([25.5, 16.], [17., 16.5]),
    'M18': ([28.5, 18.], [19., 18.5]),
    'M20': ([31.5, 20.], [21., 20.5]),
    'M24': ([37.5, 24.], [25., 24.5]),
    'M30': ([47.5, 30.], [31.5, 31.]),
    'M36': ([56.5, 36.], [37.5, 37.]),
    'M42': ([66., 42.], [44., 43.]),
    'M48': ([75., 48.], [50., 49.]),
    }

# machining details for cavities
DETAILS = {
    # cavities
    'C08-2': ('C08-2 Cavity\nSpotface, 0.50 Deep\n3/4-16 Tap, 14.4 Deep'),
    'C10-2': ('C10-2 Cavity\nSpotface, 0.50 Deep\n7/8-14 Tap, 16.0 Deep'),
    'C12-2': ('C12-2 Cavity\nSpotface, 0.50 Deep\n1-1/16-12 Tap, 19.0 Deep'),
    'C16-2': ('C16-2 Cavity\nSpotface, 0.50 Deep\n1-5/16-12 Tap, 19.0 Deep'),
    'C20-2': ('C20-2 Cavity\nSpotface, 0.50 Deep\n1-5/8-12 Tap, 19.0 Deep'),
    'C08-3': ('C08-3 Cavity\nSpotface, 0.50 Deep\n3/4-16 Tap, 14.4 Deep'),
    'C10-3': ('C10-3 Cavity\nSpotface, 0.50 Deep\n7/8-14 Tap, 16.0 Deep'),
    'C12-3': ('C12-3 Cavity\nSpotface, 0.50 Deep\n1-1/16-12 Tap, 19.0 Deep'),
    'C16-3': ('C16-3 Cavity\nSpotface, 0.50 Deep\n1-5/16-12 Tap, 19.0 Deep'),
    'C20-3': ('C20-3 Cavity\nSpotface, 0.50 Deep\n1-5/8-12 Tap, 19.0 Deep'),
    'C08-3S': ('C08-3 Cavity\nSpotface, 0.50 Deep\n3/4-16 Tap, 14.4 Deep'),
    'C10-3S': ('C10-3S Cavity\nSpotface, 0.50 Deep\n7/8-14 Tap, 16.0 Deep'),
    'C12-3S': ('C12-3S Cavity\nSpotface, 0.50 Deep\n1-1/16-12 Tap, 19.0 Deep'),
    'C16-3S': ('C16-3S Cavity\nSpotface, 0.50 Deep\n1-5/16-12 Tap, 19.0 Deep'),
    'C20-3S': ('C20-3S Cavity\nSpotface, 0.50 Deep\n1-5/8-12 Tap, 19.0 Deep'),
    'C08-4': ('C08-4 Cavity\nSpotface, 0.50 Deep\n3/4-16 Tap, 14.4 Deep'),
    'C10-4': ('C10-4 Cavity\nSpotface, 0.50 Deep\n7/8-14 Tap, 16.0 Deep'),
    'C12-4': ('C12-4 Cavity\nSpotface, 0.50 Deep\n1-1/16-12 Tap, 19.0 Deep'),
    'C16-4': ('C16-4 Cavity\nSpotface, 0.50 Deep\n1-5/16-12 Tap, 19.0 Deep'),
    'C20-4': ('C20-4 Cavity\nSpotface, 0.50 Deep\n1-5/8-12 Tap, 19.0 Deep'),

    'T-8A': ('Sun T-8A Cavity \nLocation Shoulder = 00.00 Deep \nM16x1.5-6H Tap, 9.93 Deep'),
    'T-10A': ('Sun T-10A Cavity\nLocation Shoulder = 00.00 Deep \nM20x1.5-6H Tap, 12.70 Deep'),
    'T-13A': ('Sun T-13A Cavity\nLocation Shoulder = 00.00 Deep \nM20x1.5-6H Tap, 12.70 Deep'),
    'T-3A': ('Sun T-3A Cavity \nLocation Shoulder = 00.00 Deep \n1-14 UNS-2B Tap, 15.88 Deep'),
    'T-5A': ('Sun T-5A Cavity \nLocation Shoulder = 00.00 Deep \n1-14 UNS-2B Tap, 15.88 Deep'),
    'T-16A': ('Sun T-16A Cavity\nLocation Shoulder = 00.00 Deep \nM36x2.0-6H Tap, 17.48 Deep'),
    'T-18A': ('Sun T-18A Cavity\nLocation Shoulder = 00.00 Deep \nM48x2.0-6H Tap, 22.23 Deep'),
    'T-9A': ('Sun T-9A Cavity \nLocation Shoulder = 00.00 Deep \nM16x1.5-6H Tap, 9.93 Deep'),
    'T-11A': ('Sun T-11A Cavity\nLocation Shoulder = 17.48 Deep \nM20x1.5-6H Tap, 30.18 Deep'),
    'T-2A': ('Sun T-2A Cavity \nLocation Shoulder = 18.26 Deep \n1.0-14 UNS-2B Tap, 34.14 Deep'),
    'T-17A': ('Sun T-17A Cavity\nLocation Shoulder = 23.00 Deep \nM36x2.0-6H Tap, 40.48 Deep'),
    'T-19A': ('Sun T-19A Cavity\nLocation Shoulder = 29.36 Deep \nM48x2.0-6H Tap, 51.59 Deep'),
    'T-21A': ('Sun T-21A Cavity\nLocation Shoulder = 30.18 Deep \nM20x1.5-6H Tap, 42.88 Deep'),
    'T-22A': ('Sun T-22A Cavity\nLocation Shoulder = 33.32 Deep \n1.0-14 UNS-2B Tap, 49.20 Deep'),
    'T-23A': ('Sun T-23A Cavity\nLocation Shoulder = 41.27 Deep \nM36x2.0-6H Tap, 58.75 Deep'),
    'T-24A': ('Sun T-24A Cavity\nLocation Shoulder = 50.80 Deep \nM48x2.0-6H Tap, 73.03 Deep'),

    'ISO 7789-18-01-0-98': (''),
    'ISO 7789-22-01-0-98': (''),
    'ISO 7789-33-01-0-98': (''),
    'ISO 7789-42-01-0-98': (''),
    'ISO 7789-18-02-0-98': (''),
    'ISO 7789-22-02-0-98': (''),
    'ISO 7789-42-02-0-98': (''),
    'ISO 7789-22-04-0-98': (''),
    'ISO 7789-42-04-0-98': (''),

    'M8x1.0':  ('ISO6149 M8x1.0 Port\n14.0 Spotface, 0.50 Deep\nM8x1.0 Tap, 10.0 Deep'),
    'M10x1.0': ('ISO6149 M10x1.0 Port\n16.0 Spotface, 0.50 Deep\nM10x1.0 Tap, 10.0 Deep'),
    'M12x1.5': ('ISO6149 M12x1.5 Port\n19.0 Spotface, 0.50 Deep\nM12x1.5 Tap, 11.5 Deep'),
    'M14x1.5': ('ISO6149 M14x1.5 Port\n21.0 Spotface, 0.50 Deep\nM14x1.5 Tap, 11.5 Deep'),
    'M16x1.5': ('ISO6149 M16x1.5 Port\n24.0 Spotface, 0.50 Deep\nM16x1.5 Tap, 13.0 Deep'),
    'M18x1.5': ('ISO6149 M18x1.5 Port\n26.0 Spotface, 0.50 Deep\nM18x1.5 Tap, 14.5 Deep'),
    'M22x1.5': ('ISO6149 M22x1.5 Port\n29.0 Spotface, 0.50 Deep\nM22x1.5 Tap, 15.5 Deep'),
    'M27x2.0': ('ISO6149 M27x2.0 Port\n34.0 Spotface, 0.50 Deep\nM27x2.0 Tap, 19.0 Deep'),
    'M30x2.0': ('ISO6149 M30x2.0 Port\n00.0 Spotface, 0.50 Deep\nM30x2.0 Tap, 19.0 Deep'),
    'M33x2.0': ('ISO6149 M33x2.0 Port\n43.0 Spotface, 0.50 Deep\nM33x2.0 Tap, 19.0 Deep'),
    'M42x2.0': ('ISO6149 M42x2.0 Port\n52.0 Spotface, 0.50 Deep\nM42x2.0 Tap, 19.0 Deep'),
    'M48x2.0': ('ISO6149 M48x2.0 Port\n57.0 Spotface, 0.50 Deep\nM48x2.0 Tap, 22.0 Deep'),
    'M60x2.0': ('ISO6149 M60x2.0 Port\n00.0 Spotface, 0.50 Deep\nM60x2.0 Tap, 22.0 Deep'),
    'G1/8': ('ISO1179 G1/8 Port\n17.0 Spotface, 0.50 Deep\nG1/8-28 Tap, 8.5 Deep'),
    'G1/4': ('ISO1179 G1/4 Port\n21.0 Spotface, 0.50 Deep\nG1/4-19 Tap, 12.5 Deep'),
    'G3/8': ('ISO1179 G3/8 Port\n24.5 Spotface, 0.50 Deep\nG3/8-19 Tap, 12.5 Deep'),
    'G1/2': ('ISO1179 G1/2 Port\n34.0 Spotface, 0.50 Deep\nG1/2-14 Tap, 14.5 Deep'),
    'G3/4': ('ISO1179 G3/4 Port\n40.0 Spotface, 0.50 Deep\nG3/4-14 Tap, 16.5 Deep'),
    'G1': ('ISO1179 G1 Port\n46.0 Spotface, 0.50 Deep\nG1-11 Tap, 18.5 Deep'),
    'G1-1/4': ('ISO1179 G1-1/4 Port\n54.0 Spotface, 0.50 Deep\nG1-1/4-11 Tap, 20.5 Deep'),
    'G1-1/2': ('ISO1179 G1-1/2 Port\n61.0 Spotface, 0.50 Deep\nG1-1/2-11 Tap, 22.5 Deep'),
    'G2': ('ISO1179 G2 Port\n73.0 Spotface, 0.50 Deep\nG2- Tap, 26.0 Deep'),
    'U7/16-20': ('ISO11926 7/16-20 Port\n21.0 Spotface, 0.50 Deep\n7/16-20 Tap, 13.5 Deep'),
    'U1/2-20': ('ISO11926 1/2-20 Port\n23.0 Spotface, 0.50 Deep\n1/2-20 Tap, 13.5 Deep'),
    'U9/16-18': ('ISO11926 9/16-18 Port\n25.0 Spotface, 0.50 Deep\n9/16-18 Tap, 14.5 Deep'),
    'U3/4-16': ('ISO11926 3/4-16 Port\n30.0 Spotface, 0.50 Deep\n3/4-16 Tap, 17.5 Deep'),
    'U7/8-14': ('ISO11926 7/8-14 Port\n34.0 Spotface, 0.50 Deep\n7/8-14 Tap, 19.5 Deep'),
    'U1-1/16-12': ('ISO11926 1-1/16-12 Port\n41.0 Spotface, 0.50 Deep\n1-1/16-12 Tap, 22.5 Deep'),
    'U1-3/16-12': ('ISO11926 1-3/16-12 Port\n45.0 Spotface, 0.50 Deep\n1-3/16-12 Tap, 22.5 Deep'),
    'U1-5/16-12': ('ISO11926 1-5/16-12 Port\n49.0 Spotface, 0.50 Deep\n1-5/16-12 Tap, 23.0 Deep'),
    'U1-5/8-12': ('ISO11926 1-5/8-12 Port\n58.0 Spotface, 0.50 Deep\n1-5/8-12 Tap, 23.0 Deep'),
    'U1-7/8-12': ('ISO11926 1-7/8-12 Port\n0.0 Spotface, 0.50 Deep\n1-7/8-12 Tap, 0.0 Deep'),
    'U2-12': ('ISO11926 2-12 Port\n0.0 Spotface, 0.50 Deep\n2-12 Tap, 0.0 Deep'),

    'M4x0.7 Plug': ('M4x0.7 Plug With Copper Washer\n8.2 Spotface, 0.50 Deep\nM4x0.7 Tap, 8.0 Deep\nUse Hansa-Flex: CR 4-8-1'),
    'M5x0.8 Plug': ('M5x0.8 Plug With Copper Washer\n10.2 Spotface, 0.50 Deep\nM5x0.8 Tap, 10.0 Deep\nUse Hansa-Flex: CR 5-10-1'),
    'M6x1.0 Plug': ('M6x1.0 Plug With Copper Washer\n12.2 Spotface, 0.50 Deep\nM6x1.0 Tap, 10.0 Deep\nUse Hansa-Flex: CR 6-12-1'),
    'M8x1.25 Plug': ('M8x1.25 Plug With Copper Washer\n15.2 Spotface, 0.50 Deep\nM8x1.25 Tap, 12.0 Deep\nUse Hansa-Flex: CR 8-15-1'),
    'M10x1.5 Plug': ('M10x1.5 Plug With Copper Washer\n18.2 Spotface, 0.50 Deep\nM10x1.5 Tap, 18.0 Deep\nUse Hansa-Flex: CR 10-18-1'),

    'DIN24342 NG16': ('DIN24342 NG16\nSee Cavity Details'),
    'DIN24342 NG25': ('DIN24342 NG25\nSee Cavity Details'),
    'DIN24342 NG32': ('DIN24342 NG32\nSee Cavity Details'),
    'DIN24342 NG40': ('DIN24342 NG40\nSee Cavity Details'),
    'DIN24342 NG50': ('DIN24342 NG50\nSee Cavity Details'),
    'DIN24342 NG63': ('DIN24342 NG63\nSee Cavity Details'),

    'ISO6162-1 1/2': ('ISO6162-1 1/2 Flange\nM8x1.25 Tap, 16.0 Deep\n4 Places'),
    'ISO6162-1 3/4': ('ISO6162-1 3/4 Flange\nM10x1.5 Tap, 20.0 Deep\n4 Places'),
    'ISO6162-1 1': ('ISO6162-1 1 Flange\nM10x1.5 Tap, 20.0 Deep\n4 Places'),
    'ISO6162-1 1-1/4': ('ISO6162-1 1-1/4 Flange\nM10x1.5 Tap, 20.0 Deep\n4 Places'),
    'ISO6162-1 1-1/2': ('ISO6162-1 1-1/2 Flange\nM12x1.75 Tap, 24.0 Deep\n4 Places'),
    'ISO6162-1 2': ('ISO6162-1 2 Flange\nM12x1.75 Tap, 24.0 Deep\n4 Places'),
    'ISO6162-1 2-1/2': ('ISO6162-1 2-1/2 Flange\nM12x1.75 Tap, 24.0 Deep\n4 Places'),
    'ISO6162-1 3': ('ISO6162-1 3 Flange\nM16x2.0 Tap, 32.0 Deep\n4 Places'),
    'ISO6162-1 3-1/2': ('ISO6162-1 3-1/2 Flange\nM16x2.0 Tap, 32.0 Deep\n4 Places'),
    'ISO6162-1 4': ('ISO6162-1 4 Flange\nM16x2.0 Tap, 32.0 Deep\n4 Places'),
    'ISO6162-1 5': ('ISO6162-1 5 Flange\nM16x2.0 Tap, 32.0 Deep\n4 Places'),
    'ISO6162-2 1/2': ('ISO6162-2 1/2 Flange\nM8x1.25 Tap, 16.0 Deep\n4 Places'),
    'ISO6162-2 3/4': ('ISO6162-2 3/4 Flange\nM10x1.5 Tap, 20.0 Deep\n4 Places'),
    'ISO6162-2 1': ('ISO6162-2 1 Flange\nM12x1.75 Tap, 24.0 Deep\n4 Places'),
    'ISO6162-2 1-1/4': ('ISO6162-2 1-1/4 Flange\nM14x2.0 Tap, 28.0 Deep\n4 Places'),
    'ISO6162-2 1-1/2': ('ISO6162-2 1-1/2 Flange\nM16x2.0 Tap, 32.0 Deep\n4 Places'),
    'ISO6162-2 2': ('ISO6162-2 2 Flange\nM20x2.5 Tap, 40.0 Deep\n4 Places'),
    'ISO6164 3/8': ('ISO6164 3/8 Flange\nM6x1.0 Tap, 12.0 Deep\n4 Places'),
    'ISO6164 1/2': ('ISO6164 1/2 Flange\nM8x1.25 Tap, 16.0 Deep\n4 Places'),
    'ISO6164 3/4': ('ISO6164 3/4 Flange\nM8x1.25 Tap, 16.0 Deep\n4 Places'),
    'ISO6164 1': ('ISO6164 1 Flange\nM10x1.5 Tap, 20.0 Deep\n4 Places'),
    'ISO6164 1-1/4': ('ISO6164 1-1/4 Flange\nM12x1.75 Tap, 24.0 Deep\n4 Places'),
    'ISO6164 1-1/2': ('ISO6164 1-1/2 Flange\nM14x2.0 Tap, 28.0 Deep\n4 Places'),
    'ISO6164 2': ('ISO6164 2 Flange\nM16x2.0 Tap, 32.0 Deep\n4 Places'),
    'ISO6164 2-1/2': ('ISO6164 2-1/2 Flange\nM20x2.5 Tap, 40.0 Deep\n4 Places'),
    'ISO6164 3': ('ISO6164 3 Flange\nM20x2.5 Tap, 40.0 Deep\n4 Places'),

    'NG6': (''),
    'NG10': (''),
    'NG16': (''),
    'NG25': (''),
    'NG32': (''),
    }

# list of faces on the block, FACES[0] .. FACES[5] are the block surfaces
FACES = ['Front', 'Top', 'Right', 'Rear', 'Bottom', 'Left']

# disabling import-error pylint warning
# pylint: disable=E0401
# disabling wrong-import-position pylint warning
# pylint: disable=C0413
import FreeCAD as App
import Part
from PySide import QtGui
# disabling no-member pylint warning
# pylint: disable=E1101
# disabling too-many-instance-attributes pylint warning
# pylint: disable=R0902
# disabling too-many-arguments pylint warning
# pylint: disable=R0913
class Manifold(QtGui.QDialog):
    '''
    Manifold creation
    '''
    # disabling line-too-long pylint warning
    # pylint: disable=C0301
    # disabling too-many-lines pylint warning
    # pylint: disable=C0302
    # disabling Too many branches pylint warning
    # pylint: disable=R0912
    # disabling too-many-locals pylint warning
    # pylint: disable=R0914
    # disabling Too many statements pylint warning
    # pylint: disable=R0915
    def __init__(self):
        '''
        save the new document into a folder with a csv file with the following information:
        first line has information of block size; the string 'Block' then x, y, z dimensions of the block
        ie. Block,100.,200.,300.0
        note, Block, not block; no quotes, then comma and x, y, z float values, note decimal point all comma
        separated and no whitespaces.
        next line can have any of the following, but the lines must have the format noted
        common to all; face, x and y coorinates, face must be one of the following:
        Front, Top, Right, Rear, Bottom, Left;  x and y coorinates are float values,
        all comma separated and no whitespace.
        next lines can be:
        cavity: see all key values in CAVITIES dict
        ie. Front,25.,50.,C08-2
        note the common data; then a value of the key from CAVITIES dict
        note that the x and y valves should match the x and y valves of a drillbit, for correct design
        din valve: see all key values in DINVALVES dict
        ie. Front,25.,50.,DIN24342 NG16,0.0
        note the common data; then a value of the key from DINVALVES dict and rotation, note the whitespace
        between the commas, this is allowed; rotation in this case can be 0., 90., 180., 270.0
        note that the x and y valves should match the x and y valves of a drillbit, for correct design
        din valve port: see all key values in DINPORTS dict
        ie. Front,25.,50.,DIN24342 NG16 X,0.,25.0
        note the common data; then a value of the key from DINPORTS dict, rotation and depth, note the whitespace
        between the commas, this is allowed; rotation in this case can be 0., 90., 180., 270.0 and depth is a float value
        note that the x and y valves must match the x and y valves of the din valve, for correct design
        drillbit: see all values in DRILLBITS list
        ie. Front,25.,50.,Drillbit,10.,75.0
        note the common data; the text Drillbit, then a value from DRILLBITS list, and depth
        flange: see all values in FLANGES dict
        ie. Front,25.,50.,ISO6162-2 1-1/4,0.0
        note the common data; then a value of the key from FLANGES dict, and rotation, note the whitespace
        between the commas, this is allowed; rotation in this case can be 0., 90.0
        note that the x and y valves should match the x and y valves of a drillbit, for correct design
        ng valve: see all key values in NGVALVES dict
        ie. Front,25.,50.,NG16,0.0
        note the common data; then a value of the key from NGVALVES dict and rotation,
        rotation in this case can be 0., 90., 180., 270.0
        ng valve port: see all key values in NGPORTS dict
        ie. Front,25.,50.,NG16 P,0.,125.0
        note the common data; then a value of the key from NGPORTS dict, rotation and depth, note the whitespace
        between the commas, this is allowed; rotation in this case can be 0., 90., 180., 270.0 and depth is a float value
        note that the x and y valves must match the x and y valves of the ng valve, for correct design
        oring: see all values in ORINGS dict
        ie. Front,25.,50.,O-Ring,1.5,25.0
        note the common data; the text O-Ring, then the key value from ORINGS dict, thickness and inside diameter
        shcs: see all values in SHCS dict
        ie. Front,25.,50.,M20
        note the common data; then the key value from SHCS dict

        any of the above shapes will be subtracted from the block and a drawing will be generated
        '''
        super(Manifold, self).__init__()
        # variables for block and block size
        self.block, self.xdi, self.ydi, self.zdi = None, 0., 0., 0.
        # name of path and file; same as saved folder for block
        self.pathname, self.file = '', ''
        # save the empty document
        import FreeCADGui as Gui
        Gui.SendMsgToActiveView('Save')
        # path to the saved file, xxx.FCStd
        self.pathname = Gui.ActiveDocument.Document.FileName
        # use os to find the file in the folder
        import os
        # get name of saved file; number of lines/cells in xlsx or csv
        nam = os.path.splitext(self.pathname)[0]
        # either csv or xlsx, if both are present, xlsx will be used
        if os.path.isfile(nam +'.xlsx'):
            print('got here 1')
            # set the flag to xlsx
            self.file = nam +'.xlsx'
            print(self.file)
            # use load_workbook, which will read the xlsx file, manifold details should be on first sheet
            from openpyxl import load_workbook
            print('got here 2')
            xls = load_workbook(filename=self.file, data_only=True, read_only=True)
            print('got here 3')
            # only interested in first sheet, which will be: xls.she[0]
            she = xls['Sheet 1']
            # 2nd row should have Block details
            if she.cell(row=2, column=1).value == 'Block':
                print('got here 4')
                # she.cell(2, 2..4).value are float values for block variables
                self.xdi = she.cell(row=2, column=2).value
                self.ydi = she.cell(row=2, column=3).value
                self.zdi = she.cell(row=2, column=4).value
                print(self.xdi, self.ydi, self.zdi)
                # create the block
                self.block = Part.makeBox(self.xdi, self.ydi, self.zdi)
            else:
                raise ValueError('exception: Block not first line')
            # need to adjust the range for the row
            for row in range(3, she.max_row + 1):
                # xlsx data both string and float, so do not have to cast type
                fac, xco, yco = she.cell(row=row, column=1), she.cell(row=row, column=2), she.cell(row=row, column=3)
                fun, ar1, ar2 = she.cell(row=row, column=4), she.cell(row=row, column=5), she.cell(row=row, column=6)
                if fac not in FACES:
                    raise ValueError('exception: {0} is not in FACES'.format(fac))
                elif fun in CAVITIES:
                    self.addcavity(fac, xco, yco, fun)
                elif fun in DINVALVES:
                    self.adddin(fac, xco, yco, fun, ar1)
                elif fun in DINPORTS:
                    self.adddinport(fac, xco, yco, fun, ar1, ar2)
                elif fun == 'Drillbit':
                    self.adddrill(fac, xco, yco, ar1, ar2)
                elif fun in FLANGES:
                    self.addflange(fac, xco, yco, fun, ar1)
                elif fun in NGVALVES:
                    self.addngv(fac, xco, yco, fun, ar1)
                elif fun in NGPORTS:
                    self.addngvport(fac, xco, yco, fun, ar1, ar2)
                elif fun == 'O-Ring':
                    self.addoring(fac, xco, yco, ar1, ar2)
                elif fun in SHCS:
                    self.addshcs(fac, xco, yco, fun)
                elif fun == 'Text':
                    self.addtext(fac, xco, yco, ar1, ar2)
                else:
                    raise ValueError('exception: file incorrectly written')
        elif os.path.isfile(nam +'.csv'):
            self.file = nam +'.csv'
            # import csv module
            import csv
            with open(self.file, 'r') as fil:
                rea = csv.reader(fil, delimiter=',', quotechar='|')
                # get the first row
                row = rea.next()
                # check the first row, has to be Block
                if row[0] == 'Block':
                    # cast strings to float values for block variables
                    self.xdi, self.ydi, self.zdi = float(row[1]), float(row[2]), float(row[3])
                    # create the block
                    self.block = Part.makeBox(self.xdi, self.ydi, self.zdi)
                else:
                    raise ValueError('exception: Block not first line')
                # continue with the file, row now points to second row
                for row in rea:
                    # csv data only strings, so have to cast float for some values
                    fac, xco, yco = row[0], float(row[1]), float(row[2])
                    fun, ar1, ar2 = row[3], row[4], float(row[5])
                    if fac not in FACES:
                        raise ValueError('exception: {0} is not in FACES'.format(fac))
                    elif fun in CAVITIES:
                        print('addcavity')
                        self.addcavity(fac, xco, yco, fun)
                    elif fun in DINVALVES:
                        self.adddin(fac, xco, yco, fun, ar1)
                    elif fun in DINPORTS:
                        self.adddinport(fac, xco, yco, fun, float(ar1), ar2)
                    elif fun == 'Drillbit':
                        print('adddrill')
                        self.adddrill(fac, xco, yco, float(ar1), ar2)
                    elif fun in FLANGES:
                        self.addflange(fac, xco, yco, fun, float(ar1))
                    elif fun in NGVALVES:
                        print('addngv')
                        self.addngv(fac, xco, yco, fun, float(ar1))
                    elif fun in NGPORTS:
                        print('addngvport')
                        self.addngvport(fac, xco, yco, fun, float(ar1), ar2)
                    elif fun == 'O-Ring':
                        self.addoring(fac, xco, yco, ar1, ar2)
                    elif fun in SHCS:
                        self.addshcs(fac, xco, yco, fun)
                    elif fun == 'Text':
                        self.addtext(fac, xco, yco, ar1, ar2)
                    else:
                        raise ValueError('exception: file incorrectly written')
        # show the completed block
        Part.show(self.block)
        App.ActiveDocument.ActiveObject.Label = 'Block'
       # change transparency of the block, so its easier to view internals
        App.ActiveDocument.ActiveObject.ViewObject.Transparency = 75
        App.ActiveDocument.recompute()
        Gui.activeDocument().activeView().viewAxometric()
        Gui.SendMsgToActiveView('ViewFit')
        # generate a drawing for the block
        self.adddrawing()

    def addcavity(self, fac, xco, yco, cav):
        '''
        this function generates a cavity and places it on the block, the paraters are:
        fac = string value of the face that the cavity will be placed on
        xco = float value of the x coordinate
        yco = float value of the y coordinate
        cav = string value of the cavity
        the cavity [cav] and dict [CAVITIES] will be sent to generatecavity() which will return a solid
        the solid will then be placed [with moveto()] on the face [fac] at the x [xco] and y [yco] coordinates
        the solid will then be cut from the block
        ie. typical line in file: Front,25.,150.,T-10A
        '''
        # get the shape of the cavity
        sha = generatecavity(cav, CAVITIES)
        # position on fac face, at xco and yco coordinates and cut from block
        sha.Placement = moveto(fac, xco, yco, self.xdi, self.ydi, self.zdi)
        # cut shape from block
        self.block = self.block.cut(sha)

    def adddin(self, fac, xco, yco, din, rot):
        '''
        this function generates a din valve and places it on the block, the paraters are:
        fac = string value of the face that the shape will be placed on
        xco = float value of the x coordinate
        yco = float value of the y coordinate
        din = string value of the din valve
        rot = float value of the din valve layout: 0.0 = Z2, 90.0 = X, 180.0 = Z1, 270.0 = Y
        the din valve [din] and dict [DINVALVES] will be sent to generatecavity() which will return a solid
        the mounting holes and locating pin are also generated, the pin is positioned with rot = 0.0
        all the solids are then fused togther and then be placed [with moveto()] on the face [fac]
        at the x [xco] and y [yco] coordinates
        the Shape will also be cut from block
        ie. typical line in file: Front,100.,100.,DIN24342 NG16,0.0
        '''
        rot = float(rot)
       # check if rot value is one of the correct values
        if rot == 0.0 or rot == 90.0 or rot == 180.0 or rot == 270.0:
            # get the shape of the cavity
            sha = generatecavity(din, DINVALVES)
            # get dinbolt details: xy dim. (half dim.), thread dia, dep, (pin coor., dri, dep)
            xydi, dri, dep, pxco, pdri, pdep = DINPATTERNS[din]
            # create the mounting holes
            sha0 = generatedrill(dri, dep)
            sha0.Placement = App.Placement(App.Vector(xydi, 0., xydi), App.Rotation(App.Vector(0., 0., 0.), 0.))
            # mirror the mounting holes around cavity
            sha1 = sha0.mirror(App.Vector(1., 0., 0.), App.Vector(0., 0., 1.))
            sha2 = sha0.mirror(App.Vector(0., 0., 1.), App.Vector(1., 0., 0.))
            sha3 = sha2.mirror(App.Vector(1., 0., 0.), App.Vector(0., 0., 1.))
            # create the locating pin
            pin = generatedrill(pdri, pdep)
            pin.Placement = App.Placement(App.Vector(-pxco, 0., xydi), App.Rotation(App.Vector(0., 0., 0.), 0.))
            # rotate pin into position on front face
            pin.rotate(App.Vector(0., 0., 0.), App.Vector(0., 1., 0.), rot)
            # fuse everythiing together
            sha = sha.fuse(sha0).fuse(sha1).fuse(sha2).fuse(sha3).fuse(pin)
            # position on fac face, at xco and yco coordinates
            sha.Placement = moveto(fac, xco, yco, self.xdi, self.ydi, self.zdi)
            # cut shape from block
            self.block = self.block.cut(sha)
        else:
            raise ValueError('exception: rot can only be 0., 90., 180., or 270.0')

    def adddinport(self, fac, xco, yco, dpo, rot, dep):
        '''
        this function generates a din port and places it on the block, the paraters are:
        fac = string value of the face that the shape will be placed on
        xco = float value of the x coordinate of the main din valve
        yco = float value of the y coordinate of the main din valve
        dpo = string value of the din port: X, Y, Z1 or Z2 only
        rot = float value of the din valve layout: 0., 90., 180., 270.0
        dep = float value of the depth of the port

        for proper location of the port, will use a reference drill, small 2.0 x 10.0
        then the port [dpo] drilling is placed correct location on front face, both reference drill and
        port drilling are fused together and rotated [rot] and lastly placed [with moveto()] on the face [fac]
        at the x [xco] and y [yco] coordinates
        the Shape will also be cut from block
        ie. typical line in file: Front,40.,40.,DIN24342 NG16 X,270.,60.0
        '''
        rot, dep = float(rot), float(dep)
       # check if rot value is one of the correct values
        if rot == 0.0 or rot == 90.0 or rot == 180.0 or rot == 270.0:
            # create the port on front face
            sha = generateport(dpo, DINPORTS, rot, dep)
            # position on fac face, at xco and yco coordinates
            sha.Placement = moveto(fac, xco, yco, self.xdi, self.ydi, self.zdi)
            # cut shape from block
            self.block = self.block.cut(sha)
        else:
            raise ValueError('exception: rot can only be 0., 90., 180., or 270.0')

    def adddrill(self, fac, xco, yco, dri, dep):
        '''
        this function generates a drilling and places it on the block, the paraters are:
        fac = string value of the face that the shape will be placed on
        xco = float value of the x coordinate
        yco = float value of the y coordinate
        dri = float value of the drill bit diameter, which is in DRILLBITS
        dep = float value of the depth of the drill bit
        the drill bit diameter [dri] and depth [dep] will be sent to generatedrill() which will return a solid
        the solid will then be placed [with moveto()] on the face [fac] at the x [xco] and y [yco] coordinates
        the solid will then be cut from the block
        ie. typical line in file: Front,12.,25.,Drillbit,10.,75.0
        '''
        dri, dep = float(dri), float(dep)
        # create shape at 0., 0., 0.0
        sha = generatedrill(dri, dep)
        # position on fac face, at xco and yco coordinates
        sha.Placement = moveto(fac, xco, yco, self.xdi, self.ydi, self.zdi)
        # cut shape from block
        self.block = self.block.cut(sha)

    def addflange(self, fac, xco, yco, fla, rot):
        '''
        this function generates a flange pattern and places it on the block, the paraters are:
        fac = string value of the face that the shape will be placed on
        xco = float value of the x coordinate
        yco = float value of the y coordinate
        fla = string value of the flange pattern
        rot = float value of the flange layout: 0., 90.0
        for proper location of the mounting holes, will place drilling, according to rotation [rot]
        then mirror three times into the correct location on front face, then all are fused together
        and lastly placed [with moveto()] on the face [fac] at the x [xco] and y [yco] coordinates
        the Shape will also be cut from block
        ie. typical line in file: Front,25.,150.,ISO6162-1 2,90.0
        '''
        rot = float(rot)
       # check if rot value is one of the correct values
        if rot == 0.0 or rot == 90.0:
            # get flange details: x dim. (half dim.), y dim. (half dim.), thread dia, dep
            xdi, ydi, dri, dep = FLANGES[fla]
            # create the mounting holes
            sha0 = generatedrill(dri, dep)
            # place flange on front face
            if rot == 0.0:
                sha0.Placement = App.Placement(App.Vector(ydi, 0., xdi), App.Rotation(App.Vector(0., 0., 0.), 0.))
            else:
                sha0.Placement = App.Placement(App.Vector(xdi, 0., ydi), App.Rotation(App.Vector(0., 0., 0.), 0.))
            # mirror the mounting holes around cavity
            sha1 = sha0.mirror(App.Vector(1., 0., 0.), App.Vector(0., 0., 1.))
            sha2 = sha0.mirror(App.Vector(0., 0., 1.), App.Vector(1., 0., 0.))
            sha3 = sha2.mirror(App.Vector(1., 0., 0.), App.Vector(0., 0., 1.))
            # fuse everythiing together
            sha = sha0.fuse(sha1).fuse(sha2).fuse(sha3)
            # position on fac face, at xco and yco coordinates
            sha.Placement = moveto(fac, xco, yco, self.xdi, self.ydi, self.zdi)
            # cut shape from block
            self.block = self.block.cut(sha)
        else:
            raise ValueError('exception: rot can only be 0., or 90.0')

    def addngv(self, fac, xco, yco, ngv, rot):
        '''
        this function generates a ng valve pattern and places it on the block, the paraters are:
        fac = string value of the face that the shape will be placed on
        xco = float value of the x coordinate
        yco = float value of the y coordinate
        ngv = string value of the ng valve pattern
        rot = float value of the ng valve layout: 0., 90., 180., 270.0

        the Shape will also be cut from block
        ie. typical line in file:
        '''
        rot = float(rot)
       # check if rot value is one of the correct values
        if rot == 0.0 or rot == 90.0 or rot == 180.0 or rot == 270.0:
            # get ng valve details; create reference shape
            det, sha = NGVALVES[ngv], generatedrill(1., 2.)
            # create a list of drillings; position and rotate on front face then fuse into one shape
            # disabling unused-variable pylint warning
            #pylint: disable=W0612
            for key, val in enumerate(det):
                xdi, ydi, dri, dep = val
                sha0 = generatedrill(dri, dep)
                sha0.Placement = App.Placement(App.Vector(xdi, 0., ydi), App.Rotation(App.Vector(0., 0., 0.), 0.))
                sha0.rotate(App.Vector(0., 0., 0.), App.Vector(0., 1., 0.), rot)
                sha = sha.fuse(sha0)
           # position on fac face, at xco and yco coordinates
            sha.Placement = moveto(fac, xco, yco, self.xdi, self.ydi, self.zdi)
            # cut shape from block
            self.block = self.block.cut(sha)
        else:
            raise ValueError('exception: rot can only be 0., 90., 180., or 270.0')

    def addngvport(self, fac, xco, yco, npo, rot, dep):
        '''
        this function generates a ng port and places it on the block, the paraters are:
        fac = string value of the face that the shape will be placed on
        xco = float value of the x coordinate of the main ng valve
        yco = float value of the y coordinate of the main ng valve
        npo = string value of the ng valve port: A, B, P, T, Ta, X, Y, or L only
        rot = float value of the din valve layout: 0., 90., 180., 270.0
        dep = float value of the depth of the port
        the Shape will also be cut from block
        ie. typical line in file:
        '''
        rot, dep = float(rot), float(dep)
       # check if rot value is one of the correct values
        if rot == 0.0 or rot == 90.0 or rot == 180.0 or rot == 270.0:
            sha = generateport(npo, NGPORTS, rot, dep)
            # position on fac face, at xco and yco coordinates
            sha.Placement = moveto(fac, xco, yco, self.xdi, self.ydi, self.zdi)
            # cut shape from block
            self.block = self.block.cut(sha)
        else:
            raise ValueError('exception: rot can only be 0., 90., 180., or 270.0')

    def addoring(self, fac, xco, yco, thi, idi):
        '''
        this function generates a oring groove and places it on the block, the paraters are:
        fac = string value of the face that the shape will be placed on
        xco = float value of the x coordinate
        yco = float value of the y coordinate
        thi = string value of the oring thickness, which is in ORINGS
        idi = float value of the oring inside diameter, which is in ORINGS[thi][1]
        the Shape will also be cut from block
        ie. typical line in file: Front,12.,25.,O-Ring,1.50,150.0
        '''
        idi = float(idi)
        # find the oring in the ORING dict
        if ORINGS[thi][1].count(idi) == 1:
            # get oring details; need radius
            squ, gro = ORINGS[thi][0]
            rad = (idi / 2)
            from FreeCAD import Base
            # create two cylinders; cut larger from smaller to create an oring groove
            sha0 = Part.makeCylinder(rad + gro, squ, Base.Vector(0., 0., 0.), Base.Vector(0., 1., 0.), 360.)
            sha1 = Part.makeCylinder(rad, squ, Base.Vector(0., 0., 0.), Base.Vector(0., 1., 0.), 360.)
            sha = sha0.cut(sha1)
            # position on fac face, at xco and yco coordinates
            sha.Placement = moveto(fac, xco, yco, self.xdi, self.ydi, self.zdi)
            # cut shape from block
            self.block = self.block.cut(sha)
        else:
            # exception will occur if drill is not in array
            raise ValueError('exception: oring must be in ORINGS dict')

    def addshcs(self, fac, xco, yco, shc):
        '''
        this function generates a shcs pocket and places it on the block, the paraters are:
        fac = string value of the face that the shape will be placed on
        xco = float value of the x coordinate
        yco = float value of the y coordinate
        shc = string value of the shcs, which is in SHCS
        the Shape will also be cut from block
        ie. typical line in file: Front,25.,150.,M20
        '''
        # get shcs details; create cylinder shape
        dia, dep = SHCS[shc][0]
        from FreeCAD import Base
        sha = Part.makeCylinder(dia / 2., dep, Base.Vector(0., 0., 0.), Base.Vector(0., 1., 0.), 360.)
        # position on fac face, at xco and yco coordinates
        sha.Placement = moveto(fac, xco, yco, self.xdi, self.ydi, self.zdi)
        # cut shape from block
        self.block = self.block.cut(sha)

    def addtext(self, fac, xco, yco, tex, rot):
        '''
        this function will generate a text shape that will be placed on the block, the paraters are:
        fac = string value of the face that the shape will be placed on
        xco = float value of the x coordinate
        yco = float value of the y coordinate
        tex = the text tht will be engraved
        rot = float value of the din valve layout: 0., 90., 180., 270.0
        the Shape will also be cut from block
        ie. typical line in file: Front,25.,150.,Tank,0.0
        '''
        pass

    def adddrawing(self):
        '''
       this function generates a drawing for the block
        '''
        import Drawing

def generatecavity(cav, dic):
    '''
    this function generates a cavity and returns the shape, the paraters are:
    cav = string value of the cavity
    dic = dict that the cav details are in
    the cavity value [cav] is used to read data from the [dic] dict, the data represents points that
    are used to generate a polygon by the Part.makePolygon() function, the polygon is then revolved
    to make a solid which will then be returned
    '''
    # get cavity details; get an empty list
    det, lis = dic[cav], []
    # create a list of vectors to generate a polygon
    # disabling unused-variable pylint warning
    #pylint: disable=W0612
    for key, val in enumerate(det):
        # each vector is a point along the profile of the cavity
        lis.append(App.Vector(val[0], val[1], 0.))
    # create the polygon
    pol = Part.makePolygon(lis)
    sol = Part.Face(pol)
    # revolve the polygon around the y axis and return shape
    return sol.revolve(App.Vector(0., 0., 0.), App.Vector(0., 1., 0.))

def generatedrill(dri, dep):
    '''
    this function generates a polygon to generate a drilling and returns the shape, the paraters are:
    dri = float value of the drill bit diameter, which is in DRILLBITS
    dep = float value of the depth of the drill bit
    the drill bit diameter [dri] is used to check that it is in DRILLBITS list, the diameter [dri] and depth [dep]
    are used to calculate drill points that will be used by the Part.makePolygon() function, the polygon is
    then revolved to make a solid which will then be returned
    '''
    # find the diameter in the DRILLBITS array
    if DRILLBITS.count(dri) == 1:
        # need radius of drill; add the depth and the adjacent for the tip of the drill
        rad = dri / 2.0
        # disabling  pylint warning
        #pylint: disable=
        from math import pi, tan
        tip = dep + (tan(pi*(31.0/180.)) * rad)
        # create the polygon from 5 vectors
        pol = Part.makePolygon([
            App.Vector(0., 0., 0.),  # start from 0., 0.0
            App.Vector(0., tip, 0.),  # draw line to 0., tip
            App.Vector(rad, dep, 0.),  # draw line to rad, dep; which are the radius and depth of the drill
            App.Vector(rad, 0., 0.),  # draw line to rad, 0.0
            App.Vector(0., 0., 0.)]) # draw line to 0., 0.0; which closes the sketch, in order to revolve
        sol = Part.Face(pol)
        # revolve the polygon around the y axis and return shape
        return sol.revolve(App.Vector(0., 0., 0.), App.Vector(0., 1., 0.))
    else:
        # exception will occur if drill is not in array
        raise ValueError('exception: diameter must be in DRILLBITS list')

def generateport(por, dic, rot, dep):
    '''
    this function generates a port and places it on the block, the paraters are:
    por = string value of the port
    dic = the dict the por valve is in
    rot = float value of the din valve layout: 0., 90., 180., 270.0
    dep = float value of the depth of the port
    for proper location of the port,
    will use a reference drill, small 1.0 x 2.0
    then the port [dpo] drilling is placed on front face,
    both reference and port drillings are fused and returned
    '''
    # create reference shape at 0., 0., 0., needed for correct placement of the port
    ref = generatedrill(1., 2.)
    # get port details: x and y dim., port dri
    xdi, ydi, dri = dic[por]
    # create the port drilling and locate it on the front face
    sha = generatedrill(dri, dep)
    sha.Placement = App.Placement(App.Vector(xdi, 0., ydi), App.Rotation(App.Vector(0., 0., 0.), 0.))
    # rotate port into position on front face
    sha.rotate(App.Vector(0., 0., 0.), App.Vector(0., 1., 0.), rot)
    # fuse everythiing together and return shape
    return ref.fuse(sha)

def getdetails(dri, dep, ent):
    '''
    this function returns a machining detail string
    dri = a drill in DRILLBITS
    dep = depth of drill
    ent = detail wanted
    '''
    return '{0:3.3f} Drill, {1:3.3f} Deep {2}\n'.format(dri, dep, DETAILS[ent])

def moveto(fac, xco, yco, xmax, ymax, zmax):
    '''
    this function returns a Placement with the correct values for a shape, the paraters are:
    fac = string value of the face that the shape will be placed on
    xco = float value of the x coordinate
    yco = float value of the y coordinate
    xmax, ymax, zmax = self.xdi, self.ydi, self.zdi
    '''
    # Front [face 1]: move to x, z and y = 0, no change to rotation
    if fac == 'Front' and xmax > xco and zmax > yco:
        return App.Placement(App.Vector(xco, 0., yco), App.Rotation(App.Vector(0., 0., 0.), 0.))
    # Top [face 2]: move to x, y and z = z_dim, 90 rotation on x axis
    elif fac == 'Top' and xmax > xco and ymax > yco:
        return App.Placement(App.Vector(xco, yco, zmax), App.Rotation(App.Vector(1., 0., 0.), 270.))
    # Right [face 3]: move to y, z and x = x_dim, 90 rotation on z axis
    elif fac == 'Right' and ymax > xco and zmax > yco:
        return App.Placement(App.Vector(xmax, xco, yco), App.Rotation(App.Vector(0., 0., 1.), 90.))
    # Rear [face 4]: move to x, z, and y = y_dim, 180 rotation on x or z axis
    elif fac == 'Rear'and xmax > xco and zmax > yco:
        return App.Placement(App.Vector(xco, ymax, yco), App.Rotation(App.Vector(1., 0., 0.), 180.))
    # Bottom [face 5]: move to x, y and z = 0, 90 rotation on z axis
    elif fac == 'Bottom' and xmax > xco and ymax > yco:
        return App.Placement(App.Vector(xco, yco, 0.), App.Rotation(App.Vector(1., 0., 0.), 90.))
    # Left [face 6]: move to y, z and x = 0, 90 rotation on z axis
    elif fac == 'Left' and ymax > xco and zmax > yco:
        return App.Placement(App.Vector(0., xco, yco), App.Rotation(App.Vector(0., 0., 1.), 270.))
    else:
        raise ValueError('exception: xco or yco greater than the size of block')

APP = Manifold()
